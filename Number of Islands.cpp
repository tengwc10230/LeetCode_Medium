#include <bits/stdc++.h>

using namespace std;

int numIslands(vector<vector<char>>& grid) {
    
    int output = 0;
    int width = grid.size();
    int len = grid[0].size();
    for(int i = 0; i < width; i ++){
        for(int j = 0; j < len; j ++){
            if(grid[i][j] == '1')
            {
                output ++;
                queue<pair<int, int>>   q_p;
                q_p.push(make_pair(i,j));
                grid[i][j] = '0';
                while (!q_p.empty())
                {
                    int m = q_p.front().first;
                    int n = q_p.front().second;
                    q_p.pop();
                    if(m != 0 && grid[m-1][n] == '1'){
                        q_p.push(make_pair(m-1,n));
                        grid[m-1][n] = '0';
                    }   
                    if(n != 0 && grid[m][n-1] == '1'){
                        q_p.push(make_pair(m,n-1));
                        grid[m][n-1] = '0';
                    }   
                    if(m != width-1 && grid[m+1][n] == '1'){
                        q_p.push(make_pair(m+1,n));
                        grid[m+1][n] = '0';
                    }   
                    if(n != len-1 && grid[m][n+1] == '1'){
                        q_p.push(make_pair(m,n+1));
                        grid[m][n+1] = '0';
                    }   
                }
            }
        }
    }
    
    return output;
}

int main(){
    auto T=clock();
    vector<vector<char>> grid = {  
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
        {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
    
    };
    int ans = numIslands(grid);
    cout << ans << endl;
    cout<<double(clock()-T)/CLOCKS_PER_SEC<<'\n';
}